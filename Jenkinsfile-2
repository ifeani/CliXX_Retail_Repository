pipeline {
    agent any

    environment {
        VERSION = "1.0.${BUILD_NUMBER}"
        PATH = "${PATH}:${getSonarPath()}:${getDockerPath()}"
    }

    stages {
        stage('Sonarcube Scan') {
            steps {
                script {
                    scannerHome = tool 'sonarqube'
                }
                withCredentials([string(credentialsId: 'SONAR_TOKEN', variable: 'SONAR_TOKEN')]) {
                    withSonarQubeEnv('SonarQubeScanner') {
                        sh "${scannerHome}/bin/sonar-scanner \
                            -Dsonar.projectKey=CliXX-App-Ifeoluwa \
                            -Dsonar.login=${SONAR_TOKEN} "
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 3, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh "docker build . -t clixx-image:$VERSION "
            }
        }

        stage('Starting Docker Image') {
            steps {
                sh '''
                if (docker ps | grep clixx-cont); then
                    echo "Docker image exists, killing it"
                    docker stop clixx-cont
                    docker rm clixx-cont
                fi
                docker run --name clixx-cont -p 80:80 -d clixx-image:$VERSION
                '''
            }
        }

        stage('Restore CliXX Database') {
            steps {
                sh '''
                python3 -m venv python3-virtualenv
                source python3-virtualenv/bin/activate
                python3 --version
                pip3 install boto3 botocore boto
                ansible-playbook $WORKSPACE/deploy_db_ansible/deploy_db.yml 
                deactivate
                '''
            }
        }

        stage('Configure DB Instance') {
            steps {
                withCredentials([string(credentialsId: 'DB_USER_NAME', variable: 'DB_USER_NAME'), string(credentialsId: 'DB_PASSWORD', variable: 'DB_PASSWORD'), string(credentialsId: 'DB_NAME', variable: 'DB_NAME'), string(credentialsId: 'SERVER_INSTANCE', variable: 'SERVER_INSTANCE')]) {
                    sh '''
                    USERNAME=${DB_USER_NAME}
                    PASSWORD=${DB_PASSWORD}
                    DBNAME=${DB_NAME}
                    SERVER_IP=$(curl -s http://checkip.dyndns.org | sed -e 's/.*Current IP Address: //' -e 's/<.*$//')
                    SERVER_INSTANCE=${SERVER_INSTANCE}
                    echo "use wordpressdb;" >> $WORKSPACE/db.setup
                    echo "UPDATE wp_options SET option_value = '$SERVER_IP' WHERE option_value LIKE 'http%';">> $WORKSPACE/db.setup
                    mysql -h $SERVER_INSTANCE -u $USERNAME -p$PASSWORD -D $DBNAME < $WORKSPACE/db.setup
                    '''
                }
            }
        }
    }
    

def getSonarPath() {
    def SonarHome = tool name: 'sonarqube', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
    return SonarHome
}

def getDockerPath() {
    def DockerHome = tool name: 'docker-inst', type: 'dockerTool'
    return DockerHome
}
